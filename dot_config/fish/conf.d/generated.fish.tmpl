{{range $environmentVariable, $value := .environmentVariables -}}
set --export {{$environmentVariable}} "{{$value}}"
{{end -}}

set --export CLOUDFLARE_API_TOKEN {{ (joinPath .chezmoi.sourceDir ".secrets.ejson" | ejsonDecrypt).cloudflare_api_token }}
set --export HOMEBREW_GITHUB_API_TOKEN {{ (joinPath .chezmoi.sourceDir ".secrets.ejson" | ejsonDecrypt).github_token_repo }}
{{- if eq .chezmoi.os "darwin" }}
{{if eq .chezmoi.arch "arm64" }}
{{output "/opt/homebrew/bin/brew" "shellenv" "fish"}}
alias assume 'source /opt/homebrew/bin/assume.fish'
{{else}}
{{output "/usr/local/bin/brew" "shellenv" "fish"}}
{{end}}
{{end -}}
{{- if isExecutable "/home/linuxbrew/.linuxbrew/bin/brew" }}
{{output "/home/linuxbrew/.linuxbrew/bin/brew" "shellenv" "fish"}}
{{end}}

{{- range $path := .paths}}
fish_add_path --global {{$path}}
{{- end}}

status is-interactive || exit

set --global fzf_fd_opts --follow --hidden{{if eq .chezmoi.os "windows"}} --path-separator //{{end}}

{{range $alias, $command := index .nonExpandedAliases -}}
alias {{$alias}} '{{$command}}'
{{end}}
{{range $alias, $command := index .aliases -}}
abbr --add {{$alias}} '{{$command | replaceAllRegex "\\${([^}]+)}" "$$${1}" | replace "\\" "\\\\" | replace "'" "\\'" | replace "$HOME" "~" }}'
{{end}}
{{range $name, $lines_and_parameters := .functions -}}
function {{$name}} --argument-names {{$lines_and_parameters.parameters | join " "}}
    {{- range $lines_and_parameters.lines}}
    {{.}}
    {{- end}}
end
{{end}}

function __select_supabase_stack
    echo --stack $(select-supabase-stack)
end

abbr --add gcm --set-cursor "git commit -m '%'"
abbr --add npa --set-cursor nix profile add nixpkgs#%
abbr --add nz --set-cursor 'nvim $(zoxide query --interactive %)'
abbr --add pnp --set-cursor "tac % | pino-pretty --colorize --translateTime 'yyyy-mm-dd HH:MM:ss' | less"
abbr --add psp --set-cursor parallel {} search % ::: choco scoop winget
abbr --add sss --function __select_supabase_stack --position anywhere

function br --wraps=broot
    set -l cmd_file (mktemp)
    if broot --outcmd $cmd_file $argv
        read --local --null cmd <$cmd_file
        rm -f $cmd_file
        {{- if eq .chezmoi.os "windows" }}
        eval (echo $cmd | sed -E 's/cd "?([^"]+)"?/builtin cd (cygpath "\1")/')
        {{- else }}
        eval $cmd
        {{- end }}
    else
        set -l code $status
        rm -f $cmd_file
        return $code
    end
end

{{ if lookPath "supa-admin-cli" }}
{{output "supa-admin-cli" "completion" "fish"}}
{{end}}
