{{range $name, $lines_and_parameters := .functions -}}
function {{$name}} (
{{- range $i, $parameter := $lines_and_parameters.parameters -}}
  {{- if $i}}, {{end -}}
  ${{$parameter -}}
{{end -}}
)
{
{{- range $lines_and_parameters.lines}}
  {{- if contains "parallel " .}}
  {{regexReplaceAll "(.*)" . "sh -c '${1}'"}}
  {{- else}}
  {{.}}
  {{- end}}
{{- end}}
}
{{end}}

{{- range $alias, $command := .aliases -}}
{{if $command | contains " " -}}
function {{$alias}}
{
  {{- if $command | hasPrefix (print $alias " ") }}
  & $(Get-Command -CommandType Application {{$alias}}){{ $command | trimPrefix $alias }} $args
  {{- else if regexMatch "powershell -c \".*\"" $command}}
  {{regexReplaceAll "powershell -c \"(.*)\"" $command "${1}" | replace "\\\"" "\"" | replace "\\$" "$"}}
  {{- else}}
  {{regexReplaceAll "\\${([^}]+)}" $command "$$Env:${1}" | replace "/" "\\"}} $args
  {{- end}}
}
{{else -}}
Set-Alias -Option AllScope {{$alias}} {{$command}}
{{end -}}
{{end -}}
{{output "broot" "--print-shell-function" "powershell"}}
{{output "starship" "init" "powershell" "--print-full-init"}}
{{output "zoxide" "init" "--cmd" "cd" "powershell"}}
